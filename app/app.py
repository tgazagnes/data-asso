import streamlit as st
import pandas as pd
import plotly.express as px
#from streamlit_dynamic_filters import DynamicFilters

# Page setting : wide layout
st.set_page_config(
    layout = "wide",
    page_title="Analyse subventions 2022 - M√©tropole de Lyon"
)

st.sidebar.caption(
    """Note m√©thodologique :
    Cette analyse se base uniquemement sur les donn√©es open-source publi√©es par l'Etat, la M√©tropole de Lyon, la Ville de Lyon.
    Les donn√©es pr√©sent√©es ici sont largement incompl√®tes et n'ont valeur que d'exemple.
                                      """)




st.markdown(
    """# üîé [Prototype] data.asso
Analyses des subventions accord√©es aux acteurs associatifs en 2022 (territoire : M√©tropole de Lyon)
"""
)
@st.cache_data
def load_data():
    df = pd.read_parquet("data/base_consolidee.parquet")
    # Copie des donn√©es pour transfo
    df_total = df.copy()
    return df_total

df_total = load_data()

# Cr√©ation du filtre dynamique par niveau g√©ographique
#niveaux_geo = ["REGION", "DEP_CODE_NOM", "LIBEPCI", "BASSIN_DE_VIE", "COMMUNE_CODE_NOM"]
#dynamic_filters = DynamicFilters(df_other, filters=niveaux_geo)
#df_other_filtre = dynamic_filters.filter_df()

tab1, tab2, tab3= st.tabs(
    [
        "Statistiques d'ensemble :trophy:",
        "Top subventions :microscope:",
        "Treemap subventions Etat :evergreen_tree:"
    ]
)


with tab1:

    # Calcul des indicateurs cl√©s de haut de tableau avant transformation
    nb_benef = df_total["B√©n√©ficiaire"].nunique()
    montant_total_2022 = df_total["Montant"].sum()

    #Nombre d'acteurs subventionn√©s & montants
    df_financeur_benef = df_total.groupby(
        ["Financeur", "B√©n√©ficiaire"], 
        as_index = False)["Montant"].sum()


    #preparation des donn√©es
    df_financeur_global = df_financeur_benef.groupby("Financeur", as_index = False).agg({
        "B√©n√©ficiaire" : "count",
        "Montant" : "sum"
    })
    df_financeur_global["Montant_2"] = df_financeur_global["Montant"].map('{:,.0f}'.format).str.replace(","," ") + " ‚Ç¨"

    # Charte graphique MERTERRE :
    colors_map = {
        "Commune de Lyon": "#48BEF0",
        "M√©tropole de Lyon (Budget principal)": "#3DCE89",
        "Etat": "#364E74",
#        "Textile": "#C384B1",
#        "Papier": "#CAA674",
#        "Metal": "#A0A0A0",
#        "Verre": "#3DCE89",
#        "Autre": "#F3B900",
    }


#    dynamic_filters.display_filters(location="sidebar")
 
    # Ligne 1 : 2 cellules avec les indicateurs cl√©s en haut de page
    l1_col1, l1_col2 = st.columns(2)

    # Pour avoir 3 cellules avec bordure, il faut nester un st.container dans chaque colonne (pas d'option bordure dans st.column)

    # 1√®re m√©trique
    cell1 = l1_col1.container(border=True)
    # Trick pour s√©parer les milliers
    nb_benef = f"{nb_benef:,.0f}".replace(",", " ")
    cell1.metric("Nombre de structures subventionn√©es en 2022", f"{nb_benef}")

    # 2√®me m√©trique 
    cell2 = l1_col2.container(border=True)
    montant_total_2022 = f"{montant_total_2022:,.0f}".replace(",", " ") + " ‚Ç¨"
    cell2.metric("Montant total allou√© en 2022 (tous financeurs)", f"{montant_total_2022}")


    # Ligne 2 : 2 graphiques en ligne : donut et bar chart mat√©riaux
#    l2_col1, l2_col2 = st.columns(2)
#    with l2_col1:

    #Graphique √† barres empli√©es du nombre de d√©chets par type


    fig = px.bar(df_financeur_global.sort_values(by = "Montant", ascending = False), x = "Montant", y="Financeur", 
                color="Financeur",
                barmode = 'stack',
                text = "Montant_2",
                title = "Montants des subventions par financeur en 2022",
                color_discrete_map=colors_map)
    fig.update_traces(textposition="inside")
    fig.update_layout(
        autosize=True,
        uniformtext_minsize=8,
        uniformtext_mode="hide",
        showlegend=False,
        yaxis_title=None
    )
    # Affichage du graphique
    st.plotly_chart(fig, use_container_width=True)

#    with l2_col2:
        #Graphique √† barres empli√©es du nombre de d√©chets par type

    fig2 = px.bar(df_financeur_global.sort_values(by = "B√©n√©ficiaire", ascending = False), x = "B√©n√©ficiaire", y="Financeur", 
                color="Financeur",
                barmode = 'stack',
                text = "B√©n√©ficiaire",
                title = "Nombre de structures subventionn√©es en 2022",
                color_discrete_map=colors_map)
    fig2.update_traces(textposition="inside")
    fig2.update_layout(
        autosize=True,
        uniformtext_minsize=8,
        uniformtext_mode="hide",
        showlegend=False,
        xaxis_title="Nombre de structures b√©n√©ficiaires",
        yaxis_title = None
    )

    # Affichage du graphique
    st.plotly_chart(fig2, use_container_width=True)

    st.write("")
    st.caption(
        "Note : Cette analyse se base sur les structures qui ont pu √™tre identifi√©es comme associatives.\
        Les jeux de donn√©es publi√©s par la M√©tropole de Lyon et la Ville de Lyon ne contiennent pas d'information sur la nature des structures,\
        les structures reconnues comme n'√©tant pas acteurs associatifs ont √©t√© exclues (bailleurs sociaux, ...)."
    )

    st.divider()


# Onglet 2 : 
with tab2:
    st.write("")

    df_financeur_benef = df_total.groupby(["Financeur", "B√©n√©ficiaire"], as_index = False)["Montant"].sum().sort_values(by = "Montant", ascending=False)

    #Ajout montant total pour trier
    df_financeur_benef_total = df_financeur_benef.groupby("B√©n√©ficiaire", as_index = False).agg({"Montant" : "sum"})

    df_financeur_benef2 = df_financeur_benef.merge(df_financeur_benef_total, on = "B√©n√©ficiaire", how = "left")
    df_financeur_benef2 = df_financeur_benef2.sort_values(by = ["Montant_y", "Montant_x"], ascending = False)

    #Top structures subventionn√©es
    fig = px.bar(df_financeur_benef2.head(20), x="Montant_x", y="B√©n√©ficiaire",
            barmode = 'stack',
            title = "Top 10 des structures subventionn√©es en 2022",
            color = "Financeur",
            text = "Montant_x",
            color_discrete_map=colors_map)
    

    fig.update_traces(textposition="inside")
    fig.update_layout(
        autosize=True,
        height=600,
        uniformtext_minsize=8,
        uniformtext_mode="hide",
        showlegend=False,
        xaxis_title="Montant des subventions accord√©es en 2022",
        yaxis=dict(autorange="reversed"),
        yaxis_title = None
    )
    st.plotly_chart(fig, use_container_width=True)

with tab3:
    df_financeur_etat = df_total[df_total["Financeur"] == "Etat"].groupby(["B√©n√©ficiaire"], as_index = False)["Montant"].sum().sort_values(by = "Montant", ascending=False)
    fig = px.treemap(df_financeur_etat, path=[px.Constant("Etat"), "B√©n√©ficiaire"], values='Montant',
                    color='B√©n√©ficiaire', 
#                    hover_data=['iso_alpha'],
                    color_continuous_scale='RdBu',
                    textinfo = "label+values"
#                    color_continuous_midpoint=np.average(df['lifeExp'], weights=df['pop'])
    )
    fig.update_layout(margin = dict(t=50, l=25, r=25, b=25))
    st.plotly_chart(fig, use_container_width=True)
